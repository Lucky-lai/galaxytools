<?xml version="1.0" encoding="utf-8"?>
<tool id="gatk" name="GATK" version="@VERSION@.d2">
  <description>tool collection Version @VERSION@</description>
  <macros>
    <import>gatk_macros.xml</import>
    <import>realigner_target_creator.xml</import>
    <import>indel_realigner.xml</import>
    <import>base_recalibrator.xml</import>
    <import>analyze_covariates.xml</import>
    <import>print_reads.xml</import>
    <import>haplotype_caller.xml</import>
  </macros>
  <command><![CDATA[
        ############################
        ## create links to input files with correct extensions
        ############################
        ln -s -f ${cond_reference.input_bam} input.bam &&
        ln -s -f ${cond_reference.input_bam.metadata.bam_index} input.bam.bai &&

        ############################
        ## import analysis specific preprocessings by using cheetahs internal searchList
        ## if not defined, ignore
        ############################
        #if $analysis_type.analysis_type_selector + "Preprocessing" in vars()['SL'][2]
            #set $analysisPreprocessing = vars()['SL'][2][$analysis_type.analysis_type_selector + "Preprocessing"]
            #include source=$analysisPreprocessing
        #end if
        
        ############################
        ## GATK tool unspecific options
        ############################
        @GATK_EXEC@
        
        --analysis_type ${analysis_type.analysis_type_selector}

        --input_file            input.bam
        --reference_sequence    ${cond_reference.ref_file.fields.path}
        --log_to_file           ${output_log}

        #if $cond_intervals.cond_intervals_enabled
            #for $interval in $cond_intervals.intervals:
                --intervals ${interval.L}
            #end for
        #end if

        #if $cond_BQSR.cond_BQSR_enabled
          --BQSR $cond_BQSR.BQSR
        #end if

        ############################
        ## import analysis specific options by using cheetahs internal searchList
        ## if not defined throw raw python error until better idea
        ############################
        #if $analysis_type.analysis_type_selector + "Options" in vars()['SL'][2]
            #set $analysisOptions = vars()['SL'][2][$analysis_type.analysis_type_selector + "Options"]
            #include source=$analysisOptions
        #else
            #set $analysisOptions = vars()['SL'][2][$analysis_type.analysis_type_selector + "Options"]
        #end if
        
        ############################
        ## only put ERROR or FATAL log messages into stderr
        ## but keep full log for printing into log file
        ############################
        2>&1 | awk '\$1 != "INFO" && \$1 != "WARN"' >&2
]]></command>
  <inputs>
    <conditional name="cond_reference">
      <param name="cond_reference_selector" type="select" label="Choose the source for the reference list">
        <option value="cached">Locally cached</option>
      </param>
      <when value="cached">
        <param name="input_bam" type="data" format="bam" label="Input file containing sequence data (BAM)" help="-I, ‑‑input_file">
          <validator type="unspecified_build"/>
          <validator type="dataset_metadata_in_data_table" table_name="picard_indexes" metadata_name="dbkey" metadata_column="dbkey" message="Sequences are not currently available for the specified build."/>
        </param>
        <param name="ref_file" type="select" label="Using reference genome" help="-R,‑‑reference_sequence &amp;lt;reference_sequence&amp;gt;">
          <options from_data_table="picard_indexes">
            <filter type="data_meta" key="dbkey" ref="input_bam" column="dbkey"/>
          </options>
          <validator type="no_options" message="A built-in reference genome is not available for the build associated with the selected input file"/>
        </param>
      </when>
    </conditional>
    <conditional name="cond_intervals">
      <param name="cond_intervals_enabled" type="boolean" label="Select interval subset to operate on?"/>
      <when value="true">
        <repeat name="intervals" title="genomic interval over which to operate" help="-L,‑‑intervals &amp;lt;intervals&amp;gt;">
          <param name="L" type="text" value=""/>
        </repeat>
      </when>
      <when value="false"/>
    </conditional>
    <conditional name="cond_BQSR">
      <param name="cond_BQSR_enabled" type="boolean" label="Select covariates for on-the-fly recalibration?"/>
      <when value="true">
        <param name="BQSR" type="data" format="table" label="Input covariates table file for on-the-fly base quality score recalibration" help="-BQSR,‑‑BQSR &amp;lt;BQSR&amp;gt; intended primarily for use with BaseRecalibrator and PrintReads"/>
      </when>
      <when value="false"/>
    </conditional>
    <conditional name="analysis_type">
      <param name="analysis_type_selector" type="select" label="Analysis Type">
        <option value="RealignerTargetCreator">RealignerTargetCreator</option>
        <option value="IndelRealigner">IndelRealigner</option>
        <option value="BaseRecalibrator">BaseRecalibrator</option>
        <option value="AnalyzeCovariates">AnalyzeCovariates</option>
        <option value="PrintReads">PrintReads</option>
        <option value="HaplotypeCaller">HaplotypeCaller</option>
      </param>
      <when value="RealignerTargetCreator">
        <expand macro="RealignerTargetCreatorParameters"/>
      </when>
      <when value="IndelRealigner">
        <expand macro="IndelRealignerParameters"/>
      </when>
      <when value="BaseRecalibrator">
        <expand macro="BaseRecalibratorParameters"/>
      </when>
      <when value="AnalyzeCovariates">
        <expand macro="AnalyzeCovariatesParameters"/>
      </when>
      <when value="PrintReads">
        <expand macro="PrintReadsParameters"/>
      </when>
      <when value="HaplotypeCaller">
        <expand macro="HaplotypeCallerParameters"/>
      </when>
    </conditional>
  </inputs>
  <outputs>
    <expand macro="RealignerTargetCreatorOutput">
      <filter>analysis_type['analysis_type_selector'] == 'RealignerTargetCreator'</filter>
    </expand>
    <expand macro="IndelRealignerOutput">
      <filter>analysis_type['analysis_type_selector'] == 'IndelRealigner'</filter>
    </expand>
    <expand macro="BaseRecalibratorOutput">
      <filter>analysis_type['analysis_type_selector'] == 'BaseRecalibrator'</filter>
    </expand>
    <expand macro="AnalyzeCovariatesOutput">
      <filter>analysis_type['analysis_type_selector'] == 'AnalyzeCovariates'</filter>
    </expand>
    <expand macro="PrintReadsOutput">
      <filter>analysis_type['analysis_type_selector'] == 'PrintReads'</filter>
    </expand>
    <expand macro="HaplotypeCallerOutput">
      <filter>analysis_type['analysis_type_selector'] == 'HaplotypeCaller'</filter>
    </expand>
    <data format="txt" name="output_log" label="${tool.name} - ${analysis_type.analysis_type_selector} on ${on_string} (log)"/>
  </outputs>
</tool>
